@page "/api-docs/dota-voice-lines/bearer"
@using FakeAPI.BlazorWasm.Pages.Components.ApiContent
@using System.Text.Json
@using static FakeAPI.BlazorWasm.Pages.Components.ApiContent.ApiContentAuthComponent

<RadzenHeading Size="H2" Text="📘 Dota Voice Lines Bearer API Docs" />

<ApiContentAuthComponent 
    Title="🔐 Authentication"
    Description="All of the endpoints are protected using Bearer Token JWT"
    Endpoint="POST /api/login"
    SampleJson="@JsonSerializer.Serialize(new 
    { 
        username = "bearerusername", 
        password = "BearerPassword!123" 
    }, new JsonSerializerOptions { WriteIndented = true })"
    SampleJsonResponseSuccess="@LoginResponseExampleSuccess"
    SampleJsonResponseFailed="@LoginResponseExampleFailed"
    ParamSpecs="@LoginParamSpecs"
    ParamSpecsResponse="@LoginResponseSpecs" />

<ApiContentListTableComponent TItem="EndpointSpec" Endpoints="@Endpoints" />
<ApiContentSampleComponent />

@code {

    private string LoginResponseExampleSuccess = JsonSerializer.Serialize(new 
    {
        responseCode = "200",
        responseMessage = "Login successful",
        data = new {
            token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        }
    }, new JsonSerializerOptions { WriteIndented = true });

    private string LoginResponseExampleFailed = JsonSerializer.Serialize(new 
    {
        responseCode = "401",
        responseMessage = "Invalid username or password",
    }, new JsonSerializerOptions { WriteIndented = true });

    private List<ApiContentAuthComponent.ApiParamSpec> LoginParamSpecs = new()
    {
        new() { Name = "username", DataType = "string", MaxLength = "50", Notes = "Username for login" },
        new() { Name = "password", DataType = "string", MaxLength = "50", Notes = "Password for login" }
    };

    private List<ApiContentAuthComponent.ApiParamSpecResponse> LoginResponseSpecs = new()
    {
        new() { Name = "responseCode", DataType = "string", Notes = "Status Code" },
        new() { Name = "responseMessage", DataType = "string", Notes = "Description" },
        new() { Name = "data.token", DataType = "string", Notes = "Access Token" }
    };

    public class EndpointSpec
    {
        public string Method { get; set; } = "";
        public string Path { get; set; } = "";
        public string Description { get; set; } = "";
        public bool RequiresAuth { get; set; } = true;
        public string ResponseCode { get; set; } = "200 OK";
    }

    List<EndpointSpec> Endpoints = new()
    {
        new() { Method = "POST", Path = "/api/auth/login", Description = "Login dan dapatkan JWT token", RequiresAuth = false, ResponseCode = "200 OK" },
        new() { Method = "GET", Path = "/api/products", Description = "Ambil semua produk", RequiresAuth = true, ResponseCode = "200 OK" },
        new() { Method = "POST", Path = "/api/products", Description = "Tambah produk baru", RequiresAuth = true, ResponseCode = "201 Created" },
        new() { Method = "PUT", Path = "/api/products/{id}", Description = "Update produk", RequiresAuth = true, ResponseCode = "204 No Content" },
        new() { Method = "DELETE", Path = "/api/products/{id}", Description = "Hapus produk", RequiresAuth = true, ResponseCode = "204 No Content" }
    };
}
