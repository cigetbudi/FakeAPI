@typeparam TItem

<RadzenCard>
    <RadzenHeading Size="H4" Text="ðŸ“¦ Endpoint List" />

    <RadzenDataGrid Data="@Endpoints" TItem="TItem" ShowPagingSummary="false" ShowPagination="false">
        <Columns>
            <RadzenDataGridColumn TItem="TItem" Title="Method" Width="80px">
                <Template Context="data">
                    @{
                        var method = GetStringValue(data, "Method").ToLower();
                        var methodClass = $"http-badge http-badge-{method}";
                    }
                    <div class="@methodClass">@method.ToUpper()</div>
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="TItem" Title="Path">
                <Template Context="data">
                    @GetStringValue(data, "Path")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="TItem" Title="Description">
                <Template Context="data">
                    @GetStringValue(data, "Description")
                </Template>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="TItem" Title="Auth" Width="100px">
                <Template Context="data">
                    @{
                        var auth = GetStringValue(data, "Auth").ToLower();
                        var badgeClass = auth switch
                        {
                            "jwt" => "auth-jwt",
                            "basic" => "auth-basic",
                            _ => "auth-public"
                        };
                        var authDisplay = string.IsNullOrWhiteSpace(auth) ? "Public" : auth.ToUpper();
                    }
                    <div class="auth-badge @badgeClass">@authDisplay</div>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</RadzenCard>

@code {
    [Parameter] public IEnumerable<TItem> Endpoints { get; set; } = [];

    string GetStringValue(TItem item, string key)
    {
        if (item is IDictionary<string, object> dict && dict.TryGetValue(key, out var value))
        {
            return value?.ToString() ?? string.Empty;
        }
        return string.Empty;
    }
}
